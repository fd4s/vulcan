/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package benchmarks.record.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordWithUnionAndTypeField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7529083795954770251L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordWithUnionAndTypeField\",\"namespace\":\"benchmarks.record.generated\",\"fields\":[{\"name\":\"attribute\",\"type\":[{\"type\":\"record\",\"name\":\"Empty\",\"namespace\":\"benchmarks.record.generated.AttributeValue\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]},{\"type\":\"record\",\"name\":\"Invalid\",\"namespace\":\"benchmarks.record.generated.AttributeValue\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"errors\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]},{\"type\":\"record\",\"name\":\"ValidInt\",\"namespace\":\"benchmarks.record.generated.AttributeValue\",\"fields\":[{\"name\":\"value\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<RecordWithUnionAndTypeField> ENCODER =
      new BinaryMessageEncoder<RecordWithUnionAndTypeField>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordWithUnionAndTypeField> DECODER =
      new BinaryMessageDecoder<RecordWithUnionAndTypeField>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordWithUnionAndTypeField> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordWithUnionAndTypeField> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordWithUnionAndTypeField> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordWithUnionAndTypeField>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordWithUnionAndTypeField to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordWithUnionAndTypeField from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordWithUnionAndTypeField instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordWithUnionAndTypeField fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Object attribute;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordWithUnionAndTypeField() {}

  /**
   * All-args constructor.
   * @param attribute The new value for attribute
   */
  public RecordWithUnionAndTypeField(java.lang.Object attribute) {
    this.attribute = attribute;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attribute;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attribute = value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'attribute' field.
   * @return The value of the 'attribute' field.
   */
  public java.lang.Object getAttribute() {
    return attribute;
  }


  /**
   * Sets the value of the 'attribute' field.
   * @param value the value to set.
   */
  public void setAttribute(java.lang.Object value) {
    this.attribute = value;
  }

  /**
   * Creates a new RecordWithUnionAndTypeField RecordBuilder.
   * @return A new RecordWithUnionAndTypeField RecordBuilder
   */
  public static benchmarks.record.generated.RecordWithUnionAndTypeField.Builder newBuilder() {
    return new benchmarks.record.generated.RecordWithUnionAndTypeField.Builder();
  }

  /**
   * Creates a new RecordWithUnionAndTypeField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordWithUnionAndTypeField RecordBuilder
   */
  public static benchmarks.record.generated.RecordWithUnionAndTypeField.Builder newBuilder(benchmarks.record.generated.RecordWithUnionAndTypeField.Builder other) {
    if (other == null) {
      return new benchmarks.record.generated.RecordWithUnionAndTypeField.Builder();
    } else {
      return new benchmarks.record.generated.RecordWithUnionAndTypeField.Builder(other);
    }
  }

  /**
   * Creates a new RecordWithUnionAndTypeField RecordBuilder by copying an existing RecordWithUnionAndTypeField instance.
   * @param other The existing instance to copy.
   * @return A new RecordWithUnionAndTypeField RecordBuilder
   */
  public static benchmarks.record.generated.RecordWithUnionAndTypeField.Builder newBuilder(benchmarks.record.generated.RecordWithUnionAndTypeField other) {
    if (other == null) {
      return new benchmarks.record.generated.RecordWithUnionAndTypeField.Builder();
    } else {
      return new benchmarks.record.generated.RecordWithUnionAndTypeField.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordWithUnionAndTypeField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordWithUnionAndTypeField>
    implements org.apache.avro.data.RecordBuilder<RecordWithUnionAndTypeField> {

    private java.lang.Object attribute;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(benchmarks.record.generated.RecordWithUnionAndTypeField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attribute)) {
        this.attribute = data().deepCopy(fields()[0].schema(), other.attribute);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordWithUnionAndTypeField instance
     * @param other The existing instance to copy.
     */
    private Builder(benchmarks.record.generated.RecordWithUnionAndTypeField other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.attribute)) {
        this.attribute = data().deepCopy(fields()[0].schema(), other.attribute);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'attribute' field.
      * @return The value.
      */
    public java.lang.Object getAttribute() {
      return attribute;
    }


    /**
      * Sets the value of the 'attribute' field.
      * @param value The value of 'attribute'.
      * @return This builder.
      */
    public benchmarks.record.generated.RecordWithUnionAndTypeField.Builder setAttribute(java.lang.Object value) {
      validate(fields()[0], value);
      this.attribute = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'attribute' field has been set.
      * @return True if the 'attribute' field has been set, false otherwise.
      */
    public boolean hasAttribute() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'attribute' field.
      * @return This builder.
      */
    public benchmarks.record.generated.RecordWithUnionAndTypeField.Builder clearAttribute() {
      attribute = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordWithUnionAndTypeField build() {
      try {
        RecordWithUnionAndTypeField record = new RecordWithUnionAndTypeField();
        record.attribute = fieldSetFlags()[0] ? this.attribute :  defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordWithUnionAndTypeField>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordWithUnionAndTypeField>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordWithUnionAndTypeField>
    READER$ = (org.apache.avro.io.DatumReader<RecordWithUnionAndTypeField>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
